#!/usr/bin/perl

use strict;
use warnings;

use CTXFryer;
use CTXFryer::Options;

use CTXFryer::Logging qw(:all);

use CTXFryer::Grammar;
use CTXFryer::LRParser;

use CTXFryer::ProjectDef;


# Default log level
$CTXFryer::Logging::threshold = "WARN";

# Usage header
$CTXFryer::Options::help_header = <<HERE;
$CTXFryer::header
The script creates LR parser from grammar definition.
See the project documentation for more extensive info.

HERE

# Options
our %opt_tpl = (
    "input" => {
        desc     => "Read FSA specifications from file instead of std. input",
        args_min => 1,
        args_max => 1,
    },
    "log-file" => {
        desc     => "Log to file instead of std. error",
        args_min => 1,
        args_max => 1,
    },
    "log-level" => {
        desc     => "Set logging level",
        args_min => 1,
        args_max => 1,
    },
    "log-time" => {
        desc     => "Log time",
        args_min => 0,
        args_max => 0,
    },
    "log-process" => {
        desc     => "Log process",
        args_min => 0,
        args_max => 0,
    },
    "log-position" => {
        desc     => "Log code position",
        args_min => 0,
        args_max => 0,
    },
    "output" => {
        desc     => "Write FSA to file instead of std. output",
        args_min => 1,
        args_max => 1,
    },
);


# Get command-line options
my %opt = CTXFryer::Options::get(%opt_tpl);

if (@ARGV) {
    local $CTXFryer::Options::help_exit_code = 1;

    CTXFryer::Options::usage(%opt_tpl);
}

# Set log level
if ($opt{"log-level"}) {
    $CTXFryer::Logging::threshold = $opt{"log-level"}->{args}->[0];
}

# Open log file
if ($opt{"log-file"}) {
    my $log_file = $opt{"log-file"}->{args}->[0];

    my $fh;

    open($fh, ">>$log_file") or FATAL("Can't log to $log_file");

    $CTXFryer::Logging::file_handle = $fh;
}

# Log time
if ($opt{"log-time"}) {
    $CTXFryer::Logging::log_time = 1;
}

# Log process
if ($opt{"log-process"}) {
    $CTXFryer::Logging::log_process = 1;
}

# Log position
if ($opt{"log-position"}) {
    $CTXFryer::Logging::log_position = 1;
}

# Input file
my $input_file;

if ($opt{"input"}) {
    $input_file = $opt{"input"}->{args}->[0];
}

INFO("Executed");

my $project_def = new CTXFryer::ProjectDef($input_file) || exit(1);
my $metainfo    = $project_def->metaInfo();
my $terminals   = $project_def->terminalSymbols();
my $rules       = $project_def->rules();
my $attributes  = $project_def->attributes();

$terminals || FATAL("TerminalSymbols section is mandatory");
$rules     || FATAL("Rules section is mandatory");

my $root          = $rules->root();
my @non_terminals = $rules->nonTerminals();

INFO("Creating grammar");

my $grammar = new CTXFryer::Grammar(\@non_terminals, $terminals, $root, $rules, $attributes)
or FATAL("Failed to create grammar");

INFO("Reducing grammar");

$grammar = $grammar->reduce();

DEBUG("Reduced grammar: %s", $grammar);

INFO("Creating LR parser (may take some time, be patient)");

my $lr_parser = new CTXFryer::LRParser($grammar);

if ($metainfo) {
    my $label       = $metainfo->label();
    my $description = $metainfo->description();
    my $author      = $metainfo->author();

    defined $label       && $lr_parser->label($label);
    defined $author      && $lr_parser->author($author);
    defined $description && $lr_parser->description($description);
}

my $lr_parser_xml = $lr_parser->xml();

# Output
my $output = $opt{"output"};

if ($output) {
    my $output_file = $output->{args}->[0];

    if ($output_file) {
        my $fh;

        open($fh, ">$output_file")
        or FATAL("Failed to open output file %s", $output_file);

        print $fh $lr_parser_xml;

        close($fh);

        INFO("LR parser dumped to %s", $output_file);
    }
    else {
        FATAL("Output file isn't defined");
    }
}
else {
    print $lr_parser_xml;
}

INFO("Finished successfully :-)");

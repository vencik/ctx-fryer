<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xsl:stylesheet [
<!ENTITY dquote "&#34;">
<!ENTITY quote "&#39;">
]>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ctx-fryer="http://127.0.0.1/project"
                version="1.0">

<xsl:output method="text" encoding="ISO-8859-1" />
<xsl:strip-space elements="*" />

<!-- FSA state identifier -->
<xsl:template name="fsa-state">
  <xsl:param name="fsa-id"   data-type="string" />
  <xsl:param name="state-id" data-type="string" />
  <xsl:value-of select="concat('fsa_', $fsa-id, '_state_', $state-id)" />
</xsl:template>

<!-- FSA branch identifier -->
<xsl:template name="fsa-branch">
  <xsl:param name="fsa-id"   data-type="string" />
  <xsl:param name="state-id" data-type="string" />
  <xsl:param name="branch-id" data-type="string" />
  <xsl:value-of select="concat('fsa_', $fsa-id, '_state_', $state-id, '_branch_', $branch-id)" />
</xsl:template>


<!-- Decimal number to hexadecimal -->
<xsl:template name="dec2hex">
  <xsl:param name="number" data-type="number" />
  <xsl:variable name="hi" select="floor($number div 16)" />
  <xsl:variable name="lo" select="$number mod 16" />
  <xsl:if test="$hi != 0">
    <xsl:call-template name="dec2hex">
      <xsl:with-param name="number" select="$hi" />
    </xsl:call-template>
  </xsl:if>
  <xsl:value-of select="substring('0123456789abcdef', $lo + 1, 1)" />
</xsl:template>

<!-- Printable characters list -->
<xsl:variable name="printable-characters"><!--
  0x20 - 0x2f: --> !"#$%&amp;'()*+,-./<!--
  0x30 - 0x39: -->0123456789<!--
  0x3a - 0x40: -->:;&lt;=&gt;?@<!--
  0x41 - 0x5a: -->ABCDEFGHIJKLMNOPQRSTUVWXYZ<!--
  0x5b - 0x60: -->[\]^_`<!--
  0x61 - 0x7a: -->abcdefghijklmnopqrstuvwxyz<!--
  0x7b - 0x7e: -->{|}~<!--
--></xsl:variable>

<!-- ASCII character C representation -->
<xsl:template name="ord2chr">
  <xsl:param name="ord" data-type="number" />
  <xsl:choose>
    <!-- Control chars with special escape sequence -->
    <!-- Null char -->
    <xsl:when test="$ord =  0">'\0'</xsl:when>
    <!-- Audiable bell -->
    <xsl:when test="$ord =  7">'\a'</xsl:when>
    <!-- Backspace -->
    <xsl:when test="$ord =  8">'\b'</xsl:when>
    <!-- Tab -->
    <xsl:when test="$ord =  9">'\t'</xsl:when>
    <!-- LF -->
    <xsl:when test="$ord = 10">'\n'</xsl:when>
    <!-- Vertical Tab -->
    <xsl:when test="$ord = 11">'\v'</xsl:when>
    <!-- Form feed -->
    <xsl:when test="$ord = 12">'\f'</xsl:when>
    <!-- CR -->
    <xsl:when test="$ord = 13">'\r'</xsl:when>
    <!-- Esc -->
    <xsl:when test="$ord = 27">'\e'</xsl:when>

    <!-- Printable chars -->
    <!-- Apostrophe -->
    <xsl:when test="39 = $ord">'\''</xsl:when>
    <!-- Backslash -->
    <xsl:when test="92 = $ord">'\\'</xsl:when>
    <!-- Directly printable -->
    <xsl:when test="32 &lt;= $ord and $ord &lt;= 126">
      <xsl:text>'</xsl:text>
      <xsl:value-of select="substring($printable-characters, $ord - 31, 1)" />
      <xsl:text>'</xsl:text>
      <!--xsl:text disable-output-escaping="yes">&amp;#</xsl:text>
      <xsl:value-of select="$ord" />
      <xsl:text>;</xsl:text-->
    </xsl:when>

    <!-- Other chars (use hexadecimal code) -->
    <xsl:otherwise>
      <xsl:variable name="xord">
        <xsl:call-template name="dec2hex">
          <xsl:with-param name="number" select="$ord" />
        </xsl:call-template>
      </xsl:variable>
      <xsl:text>'\x</xsl:text>
      <xsl:if test="string-length($xord) &lt; 2">
        <xsl:text>0</xsl:text>
      </xsl:if>
      <xsl:value-of select="$xord" />
      <xsl:text>'</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>


<xsl:template match="fsa">/**
 *  \brief  FSA <xsl:value-of select="@id" /> definition
 *
 *  The code is generated; do NOT change it, manually.
 *
 *  This file is part of code generated by CTXFryer
 *  while producing lexical analyser source code.
 *
 *  \date  2012/06/15
 */

#include "lexical_items.h"

#include "ctx-fryer-c-rt/fsa.h"

<!-- FSA states and branches tentative definitions -->
<xsl:variable name="fsa-id"      select="@id"      />
<xsl:variable name="fsa-root-id" select="@root-id" />
/*
 * States and branches tentative definitions
 */
<xsl:for-each select="fsa-state">
<xsl:variable name="state-id" select="@id" />
static const fsa_state_t  <xsl:call-template name="fsa-state">
  <xsl:with-param name="fsa-id"   select="$fsa-id"   />
  <xsl:with-param name="state-id" select="$state-id" />
</xsl:call-template>;<xsl:for-each select="fsa-branch">
<xsl:variable name="branch-id" select="@id" />
static const fsa_branch_t <xsl:call-template name="fsa-branch">
  <xsl:with-param name="fsa-id"    select="$fsa-id"    />
  <xsl:with-param name="state-id"  select="$state-id"  />
  <xsl:with-param name="branch-id" select="$branch-id" />
</xsl:call-template>;</xsl:for-each>
<xsl:text>
</xsl:text>
</xsl:for-each>
<xsl:text>
</xsl:text>

<!-- FSA definition -->
/**
 *  \brief  FSA <xsl:value-of select="$fsa-id" />
 *
 *  <xsl:value-of select="normalize-space(description)" />
 */
const fsa_t fsa = {
    .id          = <xsl:value-of select="$fsa-id" />,
    .root        = &amp;<xsl:call-template name="fsa-state">
  <xsl:with-param name="fsa-id"   select="$fsa-id"      />
  <xsl:with-param name="state-id" select="$fsa-root-id" />
</xsl:call-template>
}; /* end of FSA <xsl:value-of select="$fsa-id" /> definition */

<!-- States and branches definitions -->
/*
 * States and branches definitions
 */
<xsl:for-each select="fsa-state">

<xsl:variable name="state-id" select="@id" />
<xsl:if test="count(accepts) > 0">
/** \brief Lexical items accepted by FSA <xsl:value-of select="$fsa-id" /> state <xsl:value-of select="$state-id" /> */
static const fsa_accept_t <xsl:call-template name="fsa-state">
  <xsl:with-param name="fsa-id"   select="$fsa-id"   />
  <xsl:with-param name="state-id" select="$state-id" />
</xsl:call-template>_accepts[] = { <xsl:for-each select="accepts">LEXI_<xsl:value-of select="normalize-space(text())" />
  <xsl:if test="not(position() = last())">, </xsl:if></xsl:for-each> };
</xsl:if>
/**
 *  \brief  FSA <xsl:value-of select="$fsa-id" /> state <xsl:value-of select="$state-id" />
 *
 *  <xsl:value-of select="normalize-space(description)" />
 */
static const fsa_state_t <xsl:call-template name="fsa-state">
  <xsl:with-param name="fsa-id"   select="$fsa-id"   />
  <xsl:with-param name="state-id" select="$state-id" />
</xsl:call-template> = {
    .id          = <xsl:value-of select="$state-id" />,
    .accept_cnt  = <xsl:value-of select="count(accepts)" />,
    .accepts     = <xsl:choose><xsl:when test="count(accepts) > 0"><xsl:call-template name="fsa-state">
  <xsl:with-param name="fsa-id"   select="$fsa-id"   />
  <xsl:with-param name="state-id" select="$state-id" />
</xsl:call-template>_accepts</xsl:when><xsl:otherwise>NULL</xsl:otherwise></xsl:choose>,
    .branch_cnt  = <xsl:value-of select="count(fsa-branch)" />,
    .branches    = {<xsl:for-each select="fsa-branch">
        &amp;<xsl:call-template name="fsa-branch">
  <xsl:with-param name="fsa-id"    select="$fsa-id"   />
  <xsl:with-param name="state-id"  select="$state-id" />
  <xsl:with-param name="branch-id" select="@id"       />
</xsl:call-template>,</xsl:for-each>
    }
}; /* end of FSA state <xsl:value-of select="$state-id" /> */
<xsl:for-each select="fsa-branch">
<xsl:variable name="branch-id" select="@id" />
/**
 *  \brief  FSA <xsl:value-of select="$fsa-id" /> state <xsl:value-of select="$state-id" /> branch <xsl:value-of select="$branch-id" />
 */
static const fsa_branch_t <xsl:call-template name="fsa-branch">
    <xsl:with-param name="fsa-id"    select="$fsa-id"    />
    <xsl:with-param name="state-id"  select="$state-id"  />
    <xsl:with-param name="branch-id" select="$branch-id" />
  </xsl:call-template> = {
    .id           = <xsl:value-of select="$branch-id" />,
    .target       = &amp;<xsl:call-template name="fsa-state">
    <xsl:with-param name="fsa-id"    select="$fsa-id"    />
    <xsl:with-param name="state-id"  select="@target-id" />
  </xsl:call-template>,
    .interval_cnt = <xsl:value-of select="count(symbol-set/symbol-interval)" />,
    .intervals    = {<xsl:for-each select="symbol-set/symbol-interval">
        { <xsl:call-template name="ord2chr">
    <xsl:with-param name="ord" select="lower-bound/symbol-ascii/@ord" />
  </xsl:call-template>, <xsl:call-template name="ord2chr">
    <xsl:with-param name="ord" select="higher-bound/symbol-ascii/@ord" />
  </xsl:call-template> },</xsl:for-each>
    }
}; /* end of FSA <xsl:value-of select="$fsa-id" /> state <xsl:value-of select="$state-id" /> branch <xsl:value-of select="$branch-id" /> */
</xsl:for-each>

</xsl:for-each>
</xsl:template>

</xsl:stylesheet>

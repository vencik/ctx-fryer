#ifndef parser_h
#define parser_h

/**
 *  \brief   Project-specific parser declaration
 *
 *  The module is a straight-forward wrapper around
 *  the generic \c sa_* interface while fixing
 *  parser tables (lexical and syntax) to those generated
 *  based on the project grammar specification.
 *
 *  This file is part of code generated by CTXFryer
 *  while producing parser source code.
 *
 *  \date  2012/09/05
 */

#include "ctx-fryer-c-rt/syntax_analyser.h"


/**
 *  \brief  Parser constructor
 *
 *  The function only wraps around \ref sa_create, fixing
 *  the lexcal and syntax analyser tables and lexical items count.
 *
 *  \param  parser                Parser (specific for the project language)
 *  \param  pda_stack_cap_mul     PDA stack initial capacity multiplier
 *  \param  pda_stack_limit       PDA stack depth limit (0 means unlimited)
 *  \param  reduct_log_enabled    Reduction log shall be kept if set
 *  \param  reduct_stack_cap_mul  Reduction stack initial capacity multiplier
 *  \param  reduct_stack_limit    Reduction stack depth limit (0 means unlimited)
 *  \param  parse_tree_enabled    Parse tree shall be created if set
 *
 *  \return Parser or \c NULL in case of an error
 */
syxa_t *parser_create(syxa_t *parser,
                      size_t  pda_stack_cap_mul,
                      size_t  pda_stack_limit,
                      int     reduct_log_enabled,
                      size_t  reduct_stack_cap_mul,
                      size_t  reduct_stack_limit,
                      int     parse_tree_enabled);


/**
 *  \brief  Parser destructor
 *
 *  The macro expands to \ref sa_destroy function call
 *
 *  \param  parser  Parser
 */
#define parser_destroy(parser) sa_destroy(parser)

#endif  /* end of #ifndef parser_h */
